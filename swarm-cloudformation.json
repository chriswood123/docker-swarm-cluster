{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "Swarm Cluster in a VPC",

  "Parameters" : {
    "VPCCIDR" : {
      "Description" : "CIDR For the VPC",
      "Type" : "String",
      "Default" : "10.200.0.0/16"
    },
    "Subnet1CIDR" : {
      "Description" : "CIDR For the first subnet",
      "Type" : "String",
      "Default" : "10.200.101.0/24"
    },
    "Subnet2CIDR" : {
      "Description" : "CIDR For the first subnet",
      "Type" : "String",
      "Default" : "10.200.102.0/24"
    },
    "Subnet3CIDR" : {
      "Description" : "CIDR For the first subnet",
      "Type" : "String",
      "Default" : "10.200.103.0/24"
    },
    "InstanceSize" : {
      "Description" : "The instance size",
      "Type" : "String",
      "Default" : "t2.micro"
    },
    "AMI" : {
      "Description" : "The AMI to use for the instance",
      "Type" : "String",
      "Default" : "ami-f95ef58a"
    },
    "KeyName" : {
      "Description" : "The name of the EC2 SSH keypair to use in the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default" : "chriswoodops"
    },
    "SSHLocation" : {
      "Description" : " The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },

  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": { "Ref" : "VPCCIDR" },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            },
            "Key" : "Name",
            "Value" : {
              "Ref" : "AWS::StackName"
            }
          }
        ]
      }
    },
    "Subnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": { "Ref" : "Subnet1CIDR" },
        "AvailabilityZone" : {
          "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            },
            "Key" : "Name",
            "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "1" ]] }
          }
        ]
      }
    },
    "Subnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": { "Ref" : "Subnet2CIDR" },
        "AvailabilityZone" : {
          "Fn::Select" : [ "1", { "Fn::GetAZs" : "" } ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            },
            "Key" : "Name",
            "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "2" ]] }
          }
        ]
      }
    },
    "Subnet3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": { "Ref" : "Subnet3CIDR" },
        "AvailabilityZone" : {
          "Fn::Select" : [ "2", { "Fn::GetAZs" : "" } ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            },
            "Key" : "Name",
            "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "3" ]] }
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ]
      }
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ]
      }
    },
    "Route": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "AttachGateway",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "Subnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet1"
        },
        "RouteTableId": {
          "Ref": "RouteTable"
        }
      }
    },
    "Subnet2outeTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet2"
        },
        "RouteTableId": {
          "Ref": "RouteTable"
        }
      }
    },
    "Subnet3outeTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet3"
        },
        "RouteTableId": {
          "Ref": "RouteTable"
        }
      }
    },
    "NetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          }
        ]
      }
    },
    "InboundHTTPNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "80",
          "To": "80"
        }
      }
    },
    "InboundSSHNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "101",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "22",
          "To": "22"
        }
      }
    },
    "InboundSwarmMgmtNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "102",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": { "Ref" : "VPCCIDR" },
        "PortRange": {
          "From": "2377",
          "To": "2377"
        }
      }
    },
    "InboundSwarmNodeNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "103",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": { "Ref" : "VPCCIDR" },
        "PortRange": {
          "From": "7946",
          "To": "7946"
        }
      }
    },
    "InboundSwarmNetNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "104",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": { "Ref" : "VPCCIDR" },
        "PortRange": {
          "From": "4789",
          "To": "4789"
        }
      }
    },
    "InboundSwarmNodeUDPNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "105",
        "Protocol": "17",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": { "Ref" : "VPCCIDR" },
        "PortRange": {
          "From": "7946",
          "To": "7946"
        }
      }
    },
    "InboundSwarmNetUDPNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "106",
        "Protocol": "17",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": { "Ref" : "VPCCIDR" },
        "PortRange": {
          "From": "4789",
          "To": "4789"
        }
      }
    },
    "InboundResponsePortsNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "110",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "1024",
          "To": "65535"
        }
      }
    },
    "InboundResponsePortsUDPNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "111",
        "Protocol": "17",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "1024",
          "To": "65535"
        }
      }
    },
    "OutBoundHTTPNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "80",
          "To": "80"
        }
      }
    },
    "OutBoundHTTPSNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "101",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "443",
          "To": "443"
        }
      }
    },
    "OutBoundSSHNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "102",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": { "Ref" : "VPCCIDR" },
        "PortRange": {
          "From": "22",
          "To": "22"
        }
      }
    },
    "OutBoundSwarmMgmtNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "103",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": { "Ref" : "VPCCIDR" },
        "PortRange": {
          "From": "2377",
          "To": "2377"
        }
      }
    },
    "OutBoundSwarmNodesNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "104",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": { "Ref" : "VPCCIDR" },
        "PortRange": {
          "From": "7946",
          "To": "7946"
        }
      }
    },
    "OutBoundSwarmNetNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "105",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": { "Ref" : "VPCCIDR" },
        "PortRange": {
          "From": "4789",
          "To": "4789"
        }
      }
    },
    "OutBoundSwarmNodesUDPNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "106",
        "Protocol": "17",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": { "Ref" : "VPCCIDR" },
        "PortRange": {
          "From": "7946",
          "To": "7946"
        }
      }
    },
    "OutBoundSwarmNetUDPNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "107",
        "Protocol": "17",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": { "Ref" : "VPCCIDR" },
        "PortRange": {
          "From": "4789",
          "To": "4789"
        }
      }
    },
    "OutBoundResponsePortsNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "110",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "1024",
          "To": "65535"
        }
      }
    },
    "OutBoundResponsePortsUDPNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        },
        "RuleNumber": "111",
        "Protocol": "17",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "1024",
          "To": "65535"
        }
      }
    },
    "Subnet1NetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet1"
        },
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        }
      }
    },
    "Subnet2NetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet2"
        },
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        }
      }
    },
    "Subnet3NetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet3"
        },
        "NetworkAclId": {
          "Ref": "NetworkAcl"
        }
      }
    },
    "S3Role" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [ {
            "Effect" : "Allow",
            "Principal" : {
              "Service" : [ "ec2.amazonaws.com" ]
            },
            "Action" : [ "sts:AssumeRole" ]
          } ]
        },
        "Path" : "/",
        "Policies" : [ {
          "PolicyName" : "swarms3",
          "PolicyDocument" : {
            "Version" : "2012-10-17",
            "Statement" : [ {
              "Effect" : "Allow",
              "Action" : [
                "s3:GetObject",
                "s3:PutObject"
              ],
              "Resource" : [
                "arn:aws:s3:::mojd-swarm-token-bucket",
                "arn:aws:s3:::mojd-swarm-token-bucket/*"
              ]
            } ]
          }
        } ]
      }
    },
    "SwarmS3InstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/",
        "Roles" : [ {
          "Ref" : "S3Role"
        } ]
      }
    },
    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "GroupDescription" : "Enable SSH access via port 22",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}},
          {"IpProtocol" : "tcp", "FromPort" : "2377", "ToPort" : "2377", "CidrIp" : { "Ref" : "VPCCIDR" }},
          {"IpProtocol" : "tcp", "FromPort" : "7946", "ToPort" : "7946", "CidrIp" : { "Ref" : "VPCCIDR" }},
          {"IpProtocol" : "tcp", "FromPort" : "4789", "ToPort" : "4789", "CidrIp" : { "Ref" : "VPCCIDR" }},
          {"IpProtocol" : "udp", "FromPort" : "7946", "ToPort" : "7946", "CidrIp" : { "Ref" : "VPCCIDR" }},
          {"IpProtocol" : "udp", "FromPort" : "4789", "ToPort" : "4789", "CidrIp" : { "Ref" : "VPCCIDR" }}
         ]
      }
    },
    "Instance1" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "ImageId" : { "Ref" : "AMI" },
        "InstanceType" : { "Ref" : "InstanceSize" },
        "KeyName" : { "Ref" : "KeyName" },
        "IamInstanceProfile" : { "Ref" : "SwarmS3InstanceProfile"},
        "Tags" : [
          {
            "Key" : "Name",
            "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "1" ]] }
          }
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : [ "", [
          "#!/bin/bash -xe\n",
          "sudo apt-get update\n",
          "sudo apt-get install apt-transport-https ca-certificates\n",
          "sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D\n",
          "sudo echo 'deb https://apt.dockerproject.org/repo ubuntu-trusty main' > /etc/apt/sources.list.d/docker.list\n",
          "sudo apt-get update\n",
          "sudo apt-get purge lxc-docker\n",
          "sudo apt-get install -y linux-image-extra-$(uname -r) linux-image-extra-virtual docker-engine\n",
          "sudo docker ps || sudo service docker start\n",
          "sudo docker swarm init\n",
          "sudo apt-get install -y unzip\n",
          "curl 'https://s3.amazonaws.com/aws-cli/awscli-bundle.zip' -o 'awscli-bundle.zip'\n",
          "unzip awscli-bundle.zip\n",
          "sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws\n",
          "mkdir ${HOME}/.aws\n",
          "echo '[default]' > ${HOME}/.aws/config\n",
          "echo 'region = eu-west-1' >> ${HOME}/.aws/config\n",
          "sudo docker swarm join-token worker -q > /tmp/worker-token\n",
          "aws s3 cp /tmp/worker-token s3://mojd-swarm-token-bucket/\n"
        ]]}}, 
        "NetworkInterfaces" : [{
          "GroupSet" : [{ "Ref" : "InstanceSecurityGroup" }],
          "AssociatePublicIpAddress" : "true",
          "DeviceIndex" : "0",
          "DeleteOnTermination" : "true",
          "SubnetId" : { "Ref" : "Subnet1" }
        }]
      }
  },
    "Instance2" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "ImageId" : { "Ref" : "AMI" },
        "InstanceType" : { "Ref" : "InstanceSize" },
        "KeyName" : { "Ref" : "KeyName" },
        "IamInstanceProfile" : { "Ref" : "SwarmS3InstanceProfile"},
        "Tags" : [
          {
            "Key" : "Name",
            "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "2" ]] }
          }
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : [ "", [
          "#!/bin/bash -xe\n",
          "sudo apt-get update\n",
          "sudo apt-get install apt-transport-https ca-certificates\n",
          "sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D\n",
          "sudo echo 'deb https://apt.dockerproject.org/repo ubuntu-trusty main' > /etc/apt/sources.list.d/docker.list\n",
          "sudo apt-get update\n",
          "sudo apt-get purge lxc-docker\n",
          "sudo apt-get install -y linux-image-extra-$(uname -r) linux-image-extra-virtual docker-engine\n",
          "sudo docker ps || sudo service docker start\n",
          "sudo apt-get install -y unzip\n",
          "curl 'https://s3.amazonaws.com/aws-cli/awscli-bundle.zip' -o 'awscli-bundle.zip'\n",
          "unzip awscli-bundle.zip\n",
          "sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws\n",
          "mkdir ${HOME}/.aws\n",
          "echo '[default]' > ${HOME}/.aws/config\n",
          "echo 'region = eu-west-1' >> ${HOME}/.aws/config\n",
          "aws s3 cp s3://mojd-swarm-token-bucket/worker-token /tmp/worker-token\n",
          "sudo docker swarm join --token $(cat /tmp/worker-token) ", { "Fn::GetAtt" : [ "Instance1", "PrivateIp" ] }, ":2377\n"
        ]]}}, 
        "NetworkInterfaces" : [{
          "GroupSet" : [{ "Ref" : "InstanceSecurityGroup" }],
          "AssociatePublicIpAddress" : "true",
          "DeviceIndex" : "0",
          "DeleteOnTermination" : "true",
          "SubnetId" : { "Ref" : "Subnet2" }
        }]
      }
  },
    "Instance3" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "ImageId" : { "Ref" : "AMI" },
        "InstanceType" : { "Ref" : "InstanceSize" },
        "KeyName" : { "Ref" : "KeyName" },
        "IamInstanceProfile" : { "Ref" : "SwarmS3InstanceProfile"},
        "Tags" : [
          {
            "Key" : "Name",
            "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "3" ]] }
          }
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : [ "", [
          "#!/bin/bash -xe\n",
          "sudo apt-get update\n",
          "sudo apt-get install apt-transport-https ca-certificates\n",
          "sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D\n",
          "sudo echo 'deb https://apt.dockerproject.org/repo ubuntu-trusty main' > /etc/apt/sources.list.d/docker.list\n",
          "sudo apt-get update\n",
          "sudo apt-get purge lxc-docker\n",
          "sudo apt-get install -y linux-image-extra-$(uname -r) linux-image-extra-virtual docker-engine\n",
          "sudo docker ps || sudo service docker start\n",
          "sudo apt-get install -y unzip\n",
          "curl 'https://s3.amazonaws.com/aws-cli/awscli-bundle.zip' -o 'awscli-bundle.zip'\n",
          "unzip awscli-bundle.zip\n",
          "sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws\n",
          "mkdir ${HOME}/.aws\n",
          "echo '[default]' > ${HOME}/.aws/config\n",
          "echo 'region = eu-west-1' >> ${HOME}/.aws/config\n",
          "aws s3 cp s3://mojd-swarm-token-bucket/worker-token /tmp/worker-token\n",
          "sudo docker swarm join --token $(cat /tmp/worker-token) ", { "Fn::GetAtt" : [ "Instance1", "PrivateIp" ] }, ":2377\n"
        ]]}}, 
        "NetworkInterfaces" : [{
          "GroupSet" : [{ "Ref" : "InstanceSecurityGroup" }],
          "AssociatePublicIpAddress" : "true",
          "DeviceIndex" : "0",
          "DeleteOnTermination" : "true",
          "SubnetId" : { "Ref" : "Subnet3" }
        }]
      }
  },
  "SwarmTokenBucket" : {
    "Type" : "AWS::S3::Bucket",
    "DeletionPolicy" : "Retain",
    "Properties" : {
      "AccessControl" : "PublicReadWrite",
      "BucketName" : "mojd-swarm-token-bucket"
    }
  }

},

"Outputs" : {
  "Instance1ip" : {
    "Value" : { "Fn::GetAtt" : [ "Instance1", "PublicIp" ] },
    "Description" : "IP of Instance 1"
  },
  "Instance2ip" : {
    "Value" : { "Fn::GetAtt" : [ "Instance2", "PublicIp" ] },
    "Description" : "IP of Instance 2"
  },
  "Instance3ip" : {
    "Value" : { "Fn::GetAtt" : [ "Instance3", "PublicIp" ] },
    "Description" : "IP of Instance 3"
  }
}

}
